// This is a package for common functions used in the main package.
package lib

import (
	"fmt"
	"strings"
)

// InferType takes an interface{} and returns a string representing the type
// of the value. This is used to infer the type of a value in a json object.
func inferType(value interface{}) string {
	switch v := value.(type) {
	case string:
		return "string"
	case bool:
		return "boolean"
	case float64:
		return "number"
	case []interface{}:
		return fmt.Sprintf("Array<%s>", inferType(v[0]))
	default:
		return "any"
	}
}

// GenerateTypeScriptInterface takes a map[string]interface{} and returns a
// string representing the typescript interface for the data. The collectionName
// is used to name the interface.
//
// Note: collectionName is meant to handle pocketbase jsons.
func GenerateTypeScriptInterface(data map[string]interface{}, collectionName string) string {
	lines := make([]string, 0)
	lines = append(lines, "interface " + strings.Title(collectionName) + " {")
	for key, value := range data {
		if key != "@collectionName" && key != "@collectionId" {
			tsType := inferType(value)
			lines = append(lines, fmt.Sprintf("    %s: %s;", key, tsType))
		}
	}
	lines = append(lines, "}")
	lines = append(lines, "// This file was autogenerated by gnosis.")
	return strings.Join(lines, "\n")
}
